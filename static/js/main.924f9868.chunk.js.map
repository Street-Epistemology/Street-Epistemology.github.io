{"version":3,"sources":["images/se-logo-color.png","utils/Confidence.tsx","DataTypes.tsx","utils/Hasher.tsx","components/Header.tsx","firebase/context.tsx","utils/dataHelper.tsx","utils/mapper.tsx","firebase/firebase.tsx","firebase/index.tsx","components/SessionList.tsx","components/CreateSession.tsx","components/Menu.tsx","components/EmojiHeader.tsx","components/Question.tsx","components/TextHeader.tsx","components/Questionnaire.tsx","utils/UrlHelper.tsx","components/ShareInfo.tsx","components/SessionStatus.tsx","App.tsx","components/AboutPage.tsx","index.tsx"],"names":["module","exports","Confidence","SessionState","mySessionId","spectatingSession","this","undefined","id","mapConfidenceToNumber","confidence","mapNumberToConfidence","value","toFlag","pos1","pos2","String","fromCharCode","fromFlag","flag","charCodeAt","Math","floor","Header","className","href","src","logo","alt","FirebaseContext","React","createContext","loadData","JSON","parse","stringify","questionJson","mapAnyToSession","input","flattenQuestionGroups","concat","map","group","questions","mapStateToSerializableSession","responses","q","initialResponses","previousConfidence","lastResponse","lastIndex","indexOf","length","created","Date","toISOString","isActive","survey","lastQuestionIndex","config","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","Firebase","app","initializeApp","database","callback","cancelCallbackOrContext","ref","orderByChild","equalTo","on","snapshot","val","sessions","Object","keys","key","session","mapper","result","off","state","child","set","findIndex","question","once","SessionList","onSessionSelected","firebase","useContext","useState","setSessions","isLoading","setIsLoading","useEffect","subscribeToSessions","results","role","scope","onClick","CreateSession","onCancel","onConfirm","setId","isValid","test","onSubmit","event","preventDefault","finalId","random","toString","padStart","htmlFor","type","name","onChange","target","disabled","symbols","Menu","useEmoji","tickSymbol","selectedSymbol","showChanges","inSession","onShowChangesToggled","onUseEmojiToggled","onSymbolSelected","onSessionStarted","data-toggle","aria-haspopup","aria-expanded","icon","faCog","aria-labelledby","checked","trigger","modal","nested","close","sessionId","symbol","to","TextHeader","groupName","Fragment","colSpan","ConfidenceLevels","StronglyDisagree","Disagree","Undecided","Agree","StronglyAgree","Question","response","questionNo","buttons","isSelected","EmojiHeader","faAngry","faFrown","faMeh","faSmile","faLaugh","iconName","color","Questionnaire","questionGroups","handleSelection","groupNo","lineNo","getHashUrl","hash","window","location","protocol","host","ShareInfo","showReset","onCopy","onReset","tweetUrl","faCopy","open","SessionStatus","sessionState","onDisconnect","isHosting","App","match","Router","hist","questionGroupsFromHash","mapTo","flatMap","setConfidenceAtIndex","index","i","confidences","mapHash","params","dataHelper","handleUnload","closeSession","isSpectating","unsubscribeFromSession","addEventListener","isComplete","thankYou","current","scrollIntoView","behavior","removeEventListener","setUseEmoji","setSessionState","setTickSymbol","setShowChanges","responseState","setResponseState","isSpectator","handleSessionChange","groups","j","changedResponse","hashChars","secondConfidence","pairFlag","push","join","getHash","useRef","hashExp","RegExp","isEmpty","every","url","encodeURI","subscribeToSession","createSession","require","copy","confirmAlert","title","message","label","newGroups","newState","updateSession","AboutPage","ReactDOM","render","Provider","StrictMode","path","document","getElementById"],"mappings":"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","file":"static/js/main.924f9868.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/se-logo-color.5eec9568.png\";","export enum Confidence {\r\n  StronglyDisagree,\r\n  Disagree,\r\n  Undecided,\r\n  Agree,\r\n  StronglyAgree,\r\n}\r\n\r\nexport const ConfidenceLevels = [\r\n  Confidence.StronglyDisagree,\r\n  Confidence.Disagree,\r\n  Confidence.Undecided,\r\n  Confidence.Agree,\r\n  Confidence.StronglyAgree,\r\n];\r\n","import { Confidence } from './utils/Confidence';\r\n\r\nexport interface QuestionResponse {\r\n  previousConfidence: Confidence | undefined;\r\n  confidence: Confidence | undefined;\r\n  question: string;\r\n}\r\n\r\nexport interface QuestionGroup {\r\n  questions: QuestionResponse[];\r\n  groupName: string;\r\n}\r\n\r\nexport interface Session {\r\n  id: string;\r\n  created: Date;\r\n  isActive: boolean;\r\n  initialResponses: Array<Confidence | null>;\r\n  responses: Array<Confidence | null>;\r\n  survey: string;\r\n  lastQuestionIndex: number | null;\r\n}\r\n\r\nexport type SessionType = 'hosting' | 'spectating';\r\n\r\nexport class SessionState {\r\n  mySessionId: string | undefined;\r\n  spectatingSession: Session | undefined;\r\n  constructor(\r\n    mySessionId: string | undefined,\r\n    spectatingSession: Session | undefined\r\n  ) {\r\n    this.mySessionId = mySessionId;\r\n    this.spectatingSession = spectatingSession;\r\n  }\r\n  type(): SessionType {\r\n    return this.mySessionId === undefined ? 'hosting' : 'spectating';\r\n  }\r\n  get isHosting() {\r\n    return this.mySessionId !== undefined;\r\n  }\r\n  get isSpectating() {\r\n    return this.spectatingSession !== undefined;\r\n  }\r\n  get sessionId(): string | undefined {\r\n    if (this.mySessionId) {\r\n      return this.mySessionId;\r\n    }\r\n    if (this.spectatingSession?.id) {\r\n      return this.spectatingSession?.id;\r\n    }\r\n\r\n    return undefined;\r\n  }\r\n}\r\n","import { Confidence } from \"./Confidence\";\r\nimport { QuestionGroup } from \"../DataTypes\";\r\n\r\nconst mapConfidenceToNumber = (confidence: Confidence | undefined): number => {\r\n  return (confidence ?? -1) + 1;\r\n};\r\n\r\nconst mapNumberToConfidence = (value: number): Confidence | undefined => {\r\n  return value === 0 ? undefined : value - 1;\r\n};\r\n\r\nconst toFlag = (\r\n  pos1: Confidence | undefined,\r\n  pos2: Confidence | undefined\r\n): string => {\r\n  const value = mapConfidenceToNumber(pos1) + mapConfidenceToNumber(pos2) * 6;\r\n  return value > 25\r\n    ? String.fromCharCode(22 + value)\r\n    : String.fromCharCode(65 + value);\r\n};\r\n\r\nconst fromFlag = (flag: string): Array<Confidence | undefined> => {\r\n  const code = flag.charCodeAt(0);\r\n  const value = code >= 64 ? flag.charCodeAt(0) - 65 : flag.charCodeAt(0) - 22;\r\n  const pos1 = mapNumberToConfidence(value % 6);\r\n  const pos2 = mapNumberToConfidence(Math.floor(value / 6));\r\n  return [pos1, pos2];\r\n};\r\n\r\nexport const getHash = (groups: QuestionGroup[]): string => {\r\n  const questions = groups.flatMap((group) => group.questions);\r\n  const hashChars: string[] = [];\r\n  for (let i = 0; i < questions.length; i += 2) {\r\n    const secondConfidence =\r\n      i + 1 >= questions.length ? undefined : questions[i + 1].confidence;\r\n    const pairFlag = toFlag(questions[i].confidence, secondConfidence);\r\n    hashChars.push(pairFlag);\r\n  }\r\n\r\n  return hashChars.join(\"\");\r\n};\r\n\r\nexport const mapHash = (hash: string | undefined, mapTo: QuestionGroup[]): QuestionGroup[] => {\r\n  if (hash === undefined) return mapTo;\r\n  const questions = mapTo.flatMap((group) => group.questions);\r\n  const setConfidenceAtIndex = (\r\n    index: number,\r\n    confidence: Confidence | undefined\r\n  ): void => {\r\n    if (index < questions.length) questions[index].confidence = confidence;\r\n  };\r\n\r\n  for (let i = 0; i < hash.length; i++) {\r\n    const confidences = fromFlag(hash[i]);\r\n    setConfidenceAtIndex(i * 2, confidences[0]);\r\n    setConfidenceAtIndex(i * 2 + 1, confidences[1]);\r\n  }\r\n\r\n  return mapTo;\r\n};\r\n","import React from 'react';\r\nimport logo from '../images/se-logo-color.png';\r\n\r\nexport const Header = () => {\r\n  return (\r\n    <div className=\"row align-items-center\">\r\n      <div className=\"col-md-auto text-center\">\r\n        <a className=\"col-sm\" href=\"https://streetepistemology.com/\">\r\n          <img src={logo} className=\"logo m-4\" alt=\"logo\" />\r\n        </a>\r\n      </div>\r\n      <div className=\"col align-middle text-center\">\r\n        <h3 className=\"col-sm text-uppercase w-100\">\r\n          How do we know what we know?\r\n        </h3>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","import React from 'react';\r\nimport Firebase from './firebase';\r\n\r\nconst FirebaseContext = React.createContext<Firebase | null>(null);\r\n\r\nexport default FirebaseContext;\r\n","import { QuestionGroup } from '../DataTypes';\r\nimport questionJson from '../files/questions.json';\r\n\r\nexport const loadData = () => {\r\n  const result: QuestionGroup[] = JSON.parse(JSON.stringify(questionJson));\r\n  return result;\r\n};\r\n","import { QuestionGroup, QuestionResponse, Session } from '../DataTypes';\r\nimport { loadData } from './dataHelper';\r\n\r\nexport const mapSessionToQuestionGroups = (session: Session) => {\r\n  const result = loadData();\r\n  let index = 0;\r\n  for (let i = 0; i < result.length; i++) {\r\n    const group = result[i];\r\n    for (let j = 0; j < group.questions.length; j++) {\r\n      const question = group.questions[j];\r\n      if (session.responses && index in session.responses) {\r\n        question.confidence = session.responses[index] ?? undefined;\r\n      }\r\n\r\n      if (session.initialResponses && index in session.initialResponses) {\r\n        question.previousConfidence =\r\n          session.initialResponses[index] ?? undefined;\r\n      }\r\n\r\n      index++;\r\n    }\r\n  }\r\n\r\n  return result;\r\n};\r\n\r\nexport const mapAnyToSession = (input: any) => {\r\n  return { ...input } as Session;\r\n};\r\n\r\nexport const flattenQuestionGroups = (input: QuestionGroup[]) => {\r\n  return ([] as QuestionResponse[]).concat(\r\n    ...input.map((group) => group.questions)\r\n  );\r\n};\r\n\r\nexport const mapStateToSerializableSession = (\r\n  input: [QuestionGroup[], QuestionResponse | null]\r\n) => {\r\n  const questions = flattenQuestionGroups(input[0]);\r\n  const responses = questions.map((q) => q.confidence ?? null);\r\n  const initialResponses = questions.map((q) => q.previousConfidence ?? null);\r\n  const lastResponse = input[1];\r\n  const lastIndex = lastResponse\r\n    ? questions.indexOf(lastResponse)\r\n    : questions.length - 1;\r\n  return {\r\n    created: new Date().toISOString(),\r\n    isActive: true,\r\n    responses: responses,\r\n    initialResponses: initialResponses,\r\n    survey: 'default',\r\n    lastQuestionIndex: lastIndex < 0 ? null : lastIndex,\r\n  };\r\n};\r\n","import app from 'firebase/app';\r\nimport 'firebase/database';\r\nimport { QuestionGroup, QuestionResponse, Session } from '../DataTypes';\r\nimport * as mapper from '../utils/mapper';\r\n\r\nconst config = {\r\n  apiKey: '',\r\n  authDomain: 'se-survey.firebaseapp.com',\r\n  databaseURL: 'https://se-survey.firebaseio.com',\r\n  projectId: 'se-survey',\r\n  storageBucket: 'se-survey.appspot.com',\r\n  messagingSenderId: '',\r\n  appId: '',\r\n};\r\n\r\nclass Firebase {\r\n  constructor() {\r\n    app.initializeApp(config);\r\n  }\r\n  database() {\r\n    return app.database();\r\n  }\r\n\r\n  subscribeToSessions(\r\n    callback: (sessions: Session[]) => any,\r\n    cancelCallbackOrContext?: (error: any) => any\r\n  ): void {\r\n    app\r\n      .database()\r\n      .ref('sessions')\r\n      .orderByChild('isActive')\r\n      .equalTo(true)\r\n      .on('value', (snapshot) => {\r\n        const val = snapshot.val();\r\n        const sessions = Object.keys(val).map((key) => {\r\n          let session = mapper.mapAnyToSession(val[key]);\r\n          session.id = key;\r\n          return session;\r\n        });\r\n        callback(sessions);\r\n      });\r\n  }\r\n\r\n  subscribeToSession(\r\n    id: string,\r\n    callback: (session: Session) => any,\r\n    cancelCallbackOrContext?: (error: any) => any\r\n  ): void {\r\n    app\r\n      .database()\r\n      .ref('sessions/' + id)\r\n      .on('value', (snapshot) => {\r\n        const result = mapper.mapAnyToSession(snapshot.val());\r\n        callback(result);\r\n      });\r\n  }\r\n\r\n  unsubscribeFromSession(id: string): void {\r\n    app\r\n      .database()\r\n      .ref('sessions/' + id)\r\n      .off();\r\n  }\r\n\r\n  createSession(id: string, state: [QuestionGroup[], QuestionResponse | null]) {\r\n    const session = mapper.mapStateToSerializableSession(state);\r\n    app.database().ref('sessions').child(id).set(session);\r\n  }\r\n\r\n  updateSession(id: string, state: [QuestionGroup[], QuestionResponse | null]) {\r\n    const session = mapper.mapStateToSerializableSession(state) as any;\r\n    const questions = mapper.flattenQuestionGroups(state[0]);\r\n    if (state[1])\r\n      session.lastQuestionIndex = questions.findIndex(\r\n        (question) => question.question === state[1]?.question\r\n      );\r\n    delete session.created;\r\n    delete session.survey;\r\n    app.database().ref('sessions').child(id).set(session);\r\n  }\r\n\r\n  closeSession(id: string) {\r\n    app.database().ref('sessions').child(id).child('isActive').set(false);\r\n  }\r\n\r\n  addSessionSubscriber(id: string) {\r\n    app\r\n      .database()\r\n      .ref('sessions')\r\n      .child(id)\r\n      .child('subscribers')\r\n      .once('value', (snapshot) => {\r\n        app\r\n          .database()\r\n          .ref('sessions')\r\n          .child(id)\r\n          .set((snapshot.val() as number) + 1);\r\n      });\r\n  }\r\n}\r\n\r\nexport default Firebase;\r\n","import FirebaseContext from './context';\r\nimport Firebase from './firebase';\r\n\r\nexport default Firebase;\r\n\r\nexport { FirebaseContext };\r\n","import { Session } from '../DataTypes';\r\nimport React, { useEffect, useState } from 'react';\r\nimport { FirebaseContext } from '../firebase';\r\n\r\ninterface SessionListProps {\r\n  onSessionSelected: (session: Session) => void;\r\n}\r\n\r\nexport const SessionList: React.FC<SessionListProps> = ({\r\n  onSessionSelected,\r\n}) => {\r\n  const firebase = React.useContext(FirebaseContext);\r\n  const [sessions, setSessions] = useState<Array<Session>>([]);\r\n  const [isLoading, setIsLoading] = useState(true);\r\n\r\n  useEffect(\r\n    () =>\r\n      firebase?.subscribeToSessions((results) => {\r\n        setSessions(results);\r\n        setIsLoading(false);\r\n      }),\r\n    [firebase]\r\n  );\r\n\r\n  return (\r\n    <div className=\"container fluid\">\r\n      {isLoading ? (\r\n        <div className=\"d-flex justify-content-center\">\r\n          <div className=\"spinner-border m-5\" role=\"status\">\r\n            <span className=\"sr-only\">Loading...</span>\r\n          </div>\r\n        </div>\r\n      ) : (\r\n        <table className=\"table\">\r\n          <thead>\r\n            <tr>\r\n              <th className=\"text-center\" scope=\"col\">\r\n                ID\r\n              </th>\r\n              {/* <th scope=\"col\">Created</th> */}\r\n              {/* <th className=\"text-center\" scope=\"col\">\r\n                Progress\r\n              </th> */}\r\n              <th className=\"text-center\" scope=\"col\"></th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {sessions\r\n              ? sessions.map((session: Session) => {\r\n                  // const responses =\r\n                  //   [...session.responses].filter((response) => response)?.length ??\r\n                  //   0;\r\n                  return (\r\n                    <tr>\r\n                      <th className=\"text-center\" scope=\"row\">\r\n                        {session.id}\r\n                      </th>\r\n                      {/* <td>{session.created}</td> */}\r\n                      {/* <td className=\"text-center\">\r\n                        {responses}\r\n                        /24 ({(responses * 100) / 24}%)\r\n                      </td> */}\r\n                      <td className=\"text-center\">\r\n                        <button\r\n                          className=\"btn btn-primary\"\r\n                          onClick={() => onSessionSelected(session)}\r\n                        >\r\n                          Join\r\n                        </button>\r\n                      </td>\r\n                    </tr>\r\n                  );\r\n                })\r\n              : null}\r\n          </tbody>\r\n        </table>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n","import React, { useState } from 'react';\r\n\r\nexport interface CreateSessionProps {\r\n  onCancel: () => void;\r\n  onConfirm: (sessionId: string) => void;\r\n}\r\n\r\nexport const CreateSession: React.FC<CreateSessionProps> = ({\r\n  onCancel,\r\n  onConfirm,\r\n}) => {\r\n  const [id, setId] = useState<string>();\r\n  const handleIdChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    setId(event.target.value);\r\n  };\r\n\r\n  const handleSubmit = (event: React.FormEvent<HTMLFormElement>) => {\r\n    event.preventDefault();\r\n    const finalId =\r\n      id +\r\n      '-' +\r\n      Math.floor(Math.random() * 9999)\r\n        .toString()\r\n        .padStart(4, '0');\r\n    onConfirm(finalId);\r\n  };\r\n\r\n  const isValid = id !== undefined && /^[a-zA-Z0-9]*$/.test(id);\r\n  return (\r\n    <div className=\"container fluid\">\r\n      <form onSubmit={handleSubmit}>\r\n        <div className=\"form-group\">\r\n          <label htmlFor=\"idInput\">Session Name</label>\r\n          <input\r\n            type=\"text\"\r\n            className=\"form-control\"\r\n            id=\"idInput\"\r\n            name=\"id\"\r\n            onChange={handleIdChange}\r\n          />\r\n          {!isValid ? (\r\n            <small className=\"form-text text-danger\">\r\n              The name must not be empty and only contain numbers and letters.\r\n            </small>\r\n          ) : null}\r\n        </div>\r\n        <button type=\"submit\" className=\"btn btn-primary\" disabled={!isValid}>\r\n          Ok\r\n        </button>\r\n        <button className=\"btn btn-primary ml-2\" onClick={onCancel}>\r\n          Cancel\r\n        </button>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n","import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport React from 'react';\r\nimport { faCog } from '@fortawesome/free-solid-svg-icons';\r\nimport Popup from 'reactjs-popup';\r\nimport { SessionList } from './SessionList';\r\nimport { Session } from '../DataTypes';\r\nimport { CreateSession } from './CreateSession';\r\nimport { Link } from 'react-router-dom';\r\n\r\nexport interface MenuProps {\r\n  useEmoji: boolean;\r\n  selectedSymbol: string;\r\n  inSession: boolean;\r\n  showChanges: boolean;\r\n  onUseEmojiToggled: (args: boolean) => void;\r\n  onShowChangesToggled: (args: boolean) => void;\r\n  onSymbolSelected: (args: string) => void;\r\n  onSessionSelected: (args: Session) => void;\r\n  onSessionStarted: (args: string) => void;\r\n}\r\n\r\nconst symbols: string[] = ['✓', '✔', '✘', '✅', '★', '🎵', '🔵'];\r\n\r\nconst Menu: React.FC<MenuProps> = ({\r\n  useEmoji,\r\n  selectedSymbol: tickSymbol,\r\n  inSession,\r\n  showChanges,\r\n  onShowChangesToggled,\r\n  onUseEmojiToggled,\r\n  onSymbolSelected,\r\n  onSessionSelected,\r\n  onSessionStarted,\r\n}) => {\r\n  return (\r\n    <div className=\"overlay\">\r\n      <div className=\"dropleft m-2 float-right menu-button\">\r\n        <button\r\n          className=\"btn btn-primary dropdown-toggle\"\r\n          type=\"button\"\r\n          id=\"dropdownMenuButton\"\r\n          data-toggle=\"dropdown\"\r\n          aria-haspopup=\"true\"\r\n          aria-expanded=\"false\"\r\n        >\r\n          <FontAwesomeIcon icon={faCog} />\r\n        </button>\r\n        <div className=\"dropdown-menu\" aria-labelledby=\"dropdownMenuButton\">\r\n          <div className=\"checkbox dropdown-item\">\r\n            <label>\r\n              <input\r\n                className=\"mr-2\"\r\n                type=\"checkbox\"\r\n                checked={useEmoji}\r\n                onClick={() => onUseEmojiToggled(!useEmoji)}\r\n              />\r\n              Switch to Emoji scale\r\n            </label>\r\n          </div>\r\n          <div className=\"checkbox dropdown-item\">\r\n            <label>\r\n              <input\r\n                className=\"mr-2\"\r\n                type=\"checkbox\"\r\n                checked={showChanges}\r\n                onClick={() => onShowChangesToggled(!showChanges)}\r\n              />\r\n              Show Changes\r\n            </label>\r\n          </div>\r\n          <div className=\"dropdown-divider\"></div>\r\n          <Popup\r\n            trigger={() => (\r\n              <span className=\"dropdown-item pointer\">Join Session</span>\r\n            )}\r\n            modal\r\n            nested\r\n          >\r\n            {(close: () => void) => (\r\n              <SessionList\r\n                onSessionSelected={(session) => {\r\n                  onSessionSelected(session);\r\n                  close();\r\n                }}\r\n              />\r\n            )}\r\n          </Popup>\r\n          <Popup\r\n            trigger={() => (\r\n              <span className=\"dropdown-item pointer\">Start Session</span>\r\n            )}\r\n            modal\r\n            nested\r\n          >\r\n            {(close: () => void) => (\r\n              <CreateSession\r\n                onConfirm={(sessionId) => {\r\n                  debugger;\r\n                  onSessionStarted(sessionId);\r\n                  close();\r\n                }}\r\n                onCancel={() => {\r\n                  debugger;\r\n                  close();\r\n                }}\r\n              />\r\n            )}\r\n          </Popup>\r\n          <div className=\"dropdown-divider\"></div>\r\n          {symbols.map((symbol) => {\r\n            return (\r\n              <span\r\n                key={symbol}\r\n                className={\r\n                  'dropdown-item pointer' +\r\n                  (symbol === tickSymbol ? ' bg-primary text-white' : '')\r\n                }\r\n                onClick={() => onSymbolSelected(symbol)}\r\n              >\r\n                {symbol}\r\n              </span>\r\n            );\r\n          })}\r\n          <div className=\"dropdown-divider\"></div>\r\n          <Link\r\n            className=\"dropdown-item pointer\"\r\n            to=\"/about\"\r\n          >\r\n            About\r\n          </Link>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Menu;\r\n","import React from 'react';\r\n\r\nexport const TextHeader = (groupName: string) => {\r\n  return (\r\n    <React.Fragment key={groupName}>\r\n      <th className=\"bth align-middle scale-text\">{groupName}</th>\r\n      <th\r\n        className=\"bth center align-middle text-center scale-text\"\r\n        colSpan={5}\r\n      >\r\n        Agree ↔ Disagree\r\n      </th>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default TextHeader;\r\n","import { QuestionResponse } from '../DataTypes';\r\nimport { ConfidenceLevels } from '../utils/Confidence';\r\nimport React from 'react';\r\n\r\nexport interface QuestionProps {\r\n  response: QuestionResponse;\r\n  tickSymbol: string;\r\n  questionNo: number | undefined;\r\n  isActive?: boolean;\r\n  showChanges?: boolean;\r\n  callback: (response: QuestionResponse) => void;\r\n}\r\n\r\nexport const Question: React.FC<QuestionProps> = ({\r\n  response,\r\n  tickSymbol,\r\n  isActive,\r\n  questionNo,\r\n  showChanges,\r\n  callback,\r\n}) => {\r\n  const buttons = ConfidenceLevels.map((confidence) => {\r\n    const isSelected = response.confidence === confidence;\r\n    const value = {\r\n      previousConfidence: response.confidence,\r\n      confidence: confidence,\r\n      question: response.question,\r\n    };\r\n    return (\r\n      <td\r\n        key={confidence}\r\n        onClick={() => (isSelected ? null : callback(value))}\r\n        className=\"td-check m-0 p-0 align-middle\"\r\n      >\r\n        <div className=\"p-0\">\r\n          <span className=\"m-0\">\r\n            {response.confidence === confidence ? tickSymbol ?? '✓' : null}\r\n          </span>\r\n          {showChanges ? (\r\n            <span className=\"m-0 opacity-30\">\r\n              {response.previousConfidence === confidence\r\n                ? tickSymbol ?? '✓'\r\n                : null}\r\n            </span>\r\n          ) : null}\r\n        </div>\r\n      </td>\r\n    );\r\n  });\r\n  return (\r\n    <tr className={isActive ? 'table-primary' : ''}>\r\n      <td className=\"scale-text\">{questionNo + '. ' + response.question}</td>\r\n      {buttons}\r\n    </tr>\r\n  );\r\n};\r\n\r\nexport default Question;\r\n","import React from 'react';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport {\r\n  faAngry,\r\n  faFrown,\r\n  faMeh,\r\n  faSmile,\r\n  faLaugh,\r\n} from '@fortawesome/free-solid-svg-icons';\r\n\r\nexport const EmojiHeader = (groupName: string) => {\r\n  return (\r\n    <React.Fragment key={groupName}>\r\n      <th className=\"bth align-middle scale-text\">{groupName}</th>\r\n      {[faAngry, faFrown, faMeh, faSmile, faLaugh].map((icon) => (\r\n        <th\r\n          key={icon.iconName}\r\n          className=\"bth center align-middle text-center scale-text p-0\"\r\n        >\r\n          <div className=\"zoom\">\r\n            <FontAwesomeIcon icon={icon} color=\"gold\" />\r\n          </div>\r\n        </th>\r\n      ))}\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default EmojiHeader;\r\n","import React, { Fragment } from 'react';\r\nimport { QuestionResponse, QuestionGroup } from '../DataTypes';\r\nimport EmojiHeader from './EmojiHeader';\r\nimport Question from './Question';\r\nimport TextHeader from './TextHeader';\r\n\r\ninterface QuestionnaireProps {\r\n  questionGroups: QuestionGroup[];\r\n  lastResponse: QuestionResponse | null;\r\n  tickSymbol: string;\r\n  useEmoji?: boolean;\r\n  showChanges?: boolean;\r\n  handleSelection: (response: QuestionResponse) => void;\r\n}\r\n\r\nexport const Questionnaire: React.FC<QuestionnaireProps> = ({\r\n  questionGroups,\r\n  lastResponse,\r\n  tickSymbol,\r\n  useEmoji,\r\n  showChanges,\r\n  handleSelection,\r\n}) => (\r\n  <table className=\"table table-bordered table-hover \">\r\n    {questionGroups.map((group, groupNo) => {\r\n      return (\r\n        <Fragment key={group.groupName}>\r\n          <thead className=\"thead-dark\">\r\n            <tr>\r\n              {useEmoji\r\n                ? EmojiHeader(group.groupName)\r\n                : TextHeader(group.groupName)}\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {group.questions.map((question, questionNo) => {\r\n              const lineNo = groupNo * 6 + questionNo + 1;\r\n              return (\r\n                <Question\r\n                  key={question.question}\r\n                  tickSymbol={tickSymbol}\r\n                  isActive={\r\n                    lastResponse !== null &&\r\n                    lastResponse.question === question.question\r\n                  }\r\n                  response={question}\r\n                  questionNo={lineNo}\r\n                  showChanges={showChanges}\r\n                  callback={handleSelection}\r\n                />\r\n              );\r\n            })}\r\n          </tbody>\r\n        </Fragment>\r\n      );\r\n    })}\r\n  </table>\r\n);\r\n\r\nexport default Questionnaire;\r\n","export const getBaseUrl = () =>\r\n  window.location.protocol + '//' + window.location.host;\r\nexport const getHashUrl = (hash: string) => getBaseUrl() + '/' + hash;\r\n","import React from 'react';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faCopy } from '@fortawesome/free-solid-svg-icons';\r\nimport { Link } from 'react-router-dom';\r\nimport { getHashUrl } from '../utils/UrlHelper';\r\n\r\ninterface ShareInfoProps {\r\n  hash: string;\r\n  showReset: boolean;\r\n  onCopy: () => void;\r\n  onReset: () => void;\r\n  tweetUrl: string;\r\n}\r\n\r\nconst ShareInfo: React.FC<ShareInfoProps> = ({\r\n  hash,\r\n  showReset,\r\n  onCopy,\r\n  onReset,\r\n  tweetUrl,\r\n}) => {\r\n  return (\r\n    <div className=\"mb-2 text-center mx-auto\">\r\n      <div className=\"border rounded p-2 align-middle d-inline-block mt-2 bg-light\">\r\n        <Link className=\"text-break\" to={'/' + hash}>\r\n          {getHashUrl(hash)}\r\n        </Link>\r\n      </div>\r\n      <button\r\n        className=\"btn btn-primary d-inline align-middle ml-1 mt-2\"\r\n        onClick={onCopy}\r\n      >\r\n        <FontAwesomeIcon icon={faCopy} />\r\n      </button>\r\n      <button\r\n        className=\"btn btn-primary d-inline align-middle ml-1 mt-2\"\r\n        onClick={onReset}\r\n        disabled={!showReset}\r\n      >\r\n        Reset\r\n      </button>\r\n      <button\r\n        className=\"btn btn-primary d-inline align-middle ml-1 mt-2 mt-twitter-share-button\"\r\n        onClick={() => window.open(tweetUrl, '_blank')}\r\n      >\r\n        Tweet\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ShareInfo;\r\n","import React from 'react';\r\nimport { SessionState } from '../DataTypes';\r\n\r\ninterface SessionStatusProps {\r\n  sessionState: SessionState | undefined;\r\n  onDisconnect: () => void;\r\n}\r\n\r\nconst SessionStatus: React.FC<SessionStatusProps> = ({\r\n  sessionState,\r\n  onDisconnect,\r\n}) => {\r\n  return (\r\n    <>\r\n      {sessionState !== undefined && (\r\n        <div className=\"mb-2 text-center mx-auto\">\r\n          <h4 className=\"d-inline-block m-2 text-center align-middle\">\r\n            {sessionState.isHosting\r\n              ? 'Hosting session ID: '\r\n              : 'Spectation session ID'}\r\n          </h4>\r\n          <div className=\"border rounded p-2 align-middle d-inline-block mt-2 bg-light\">\r\n            {sessionState.sessionId}\r\n          </div>\r\n          <button\r\n            className=\"btn btn-warning d-inline align-middle ml-1 mt-2\"\r\n            onClick={onDisconnect}\r\n          >\r\n            Disconnect\r\n          </button>\r\n        </div>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default SessionStatus;\r\n","import {\r\n  QuestionGroup,\r\n  QuestionResponse,\r\n  Session,\r\n  SessionState,\r\n} from './DataTypes';\r\nimport React, { useEffect, useRef, useState } from 'react';\r\nimport * as Router from 'react-router-dom';\r\nimport { confirmAlert } from 'react-confirm-alert';\r\nimport { mapHash, getHash } from './utils/Hasher';\r\nimport Header from './components/Header';\r\nimport Menu from './components/Menu';\r\nimport Questionnaire from './components/Questionnaire';\r\nimport ShareInfo from './components/ShareInfo';\r\nimport { getHashUrl } from './utils/UrlHelper';\r\nimport * as dataHelper from './utils/dataHelper';\r\nimport { FirebaseContext } from './firebase';\r\nimport { loadData } from './utils/dataHelper';\r\nimport * as mapper from './utils/mapper';\r\nimport SessionStatus from './components/SessionStatus';\r\n\r\ntype TParams = { id?: string | undefined };\r\n\r\nconst App = () => {\r\n  const firebase = React.useContext(FirebaseContext);\r\n  const match: Router.match<TParams> = Router.useRouteMatch();\r\n  const hist = Router.useHistory();\r\n\r\n  const questionGroupsFromHash = mapHash(\r\n    match.params.id,\r\n    dataHelper.loadData()\r\n  );\r\n\r\n  const handleUnload = (event: BeforeUnloadEvent) => {\r\n    const id = sessionState?.sessionId;\r\n    if (!id) return;\r\n    if (sessionState?.isHosting) {\r\n      firebase?.closeSession(id);\r\n    }\r\n    if (sessionState?.isSpectating) {\r\n      firebase?.unsubscribeFromSession(id);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    window.addEventListener('beforeunload', handleUnload);\r\n    if (isComplete && thankYou && thankYou.current) {\r\n      thankYou.current.scrollIntoView({ behavior: 'auto' });\r\n    }\r\n    return () => window.removeEventListener('beforeunload', handleUnload);\r\n  });\r\n\r\n  const [useEmoji, setUseEmoji] = useState<boolean>(true);\r\n  const [sessionState, setSessionState] = useState<SessionState>();\r\n  const [tickSymbol, setTickSymbol] = useState<string>('✓');\r\n  const [showChanges, setShowChanges] = useState<boolean>(true);\r\n  const [responseState, setResponseState] = useState<\r\n    [QuestionGroup[], QuestionResponse | null]\r\n  >([questionGroupsFromHash, null]);\r\n\r\n  const isSpectator =\r\n    sessionState !== undefined && sessionState.spectatingSession !== undefined;\r\n\r\n  const handleResponse = (response: QuestionResponse) => {\r\n    if (isSpectator) return;\r\n    let newGroups = [...responseState[0]];\r\n    for (let group of newGroups) {\r\n      for (let question of group.questions) {\r\n        if (question.question === response.question) {\r\n          question.confidence = response.confidence;\r\n          question.previousConfidence = response.previousConfidence;\r\n        }\r\n      }\r\n    }\r\n\r\n    const newState: [QuestionGroup[], QuestionResponse] = [\r\n      newGroups,\r\n      { ...response } as QuestionResponse,\r\n    ];\r\n\r\n    if (sessionState !== undefined && sessionState.mySessionId !== undefined)\r\n      firebase?.updateSession(sessionState.mySessionId, newState);\r\n    setResponseState(newState);\r\n  };\r\n\r\n  const handleReset = () => {\r\n    confirmAlert({\r\n      title: 'Reset',\r\n      message: 'Are you sure you want to clear all your answers?',\r\n      buttons: [\r\n        {\r\n          label: 'Yes',\r\n          onClick: () => {\r\n            setResponseState([loadData(), null]);\r\n            hist.push('/');\r\n          },\r\n        },\r\n        {\r\n          label: 'No',\r\n          onClick: () => {},\r\n        },\r\n      ],\r\n    });\r\n  };\r\n\r\n  const handleCopy = () => {\r\n    const copy = require('clipboard-copy');\r\n    copy(url);\r\n  };\r\n\r\n  const unsubscribeFromSession = () => {\r\n    const id = sessionState?.sessionId;\r\n    if (!id) return;\r\n    if (sessionState?.isHosting) {\r\n      confirmAlert({\r\n        title: 'Disconnect from Session',\r\n        message: 'Are you sure you want to stop broadcasting your session?',\r\n        buttons: [\r\n          {\r\n            label: 'Yes',\r\n            onClick: () => {\r\n              firebase?.closeSession(id);\r\n              setSessionState(undefined);\r\n            },\r\n          },\r\n          {\r\n            label: 'No',\r\n            onClick: () => {},\r\n          },\r\n        ],\r\n      });\r\n      return;\r\n    }\r\n    confirmAlert({\r\n      title: 'Disconnect from Session',\r\n      message:\r\n        'Are you sure you want to disconnect from the session \"' + id + '\"?',\r\n      buttons: [\r\n        {\r\n          label: 'Yes',\r\n          onClick: () => {\r\n            firebase?.unsubscribeFromSession(id);\r\n            setSessionState(undefined);\r\n          },\r\n        },\r\n        {\r\n          label: 'No',\r\n          onClick: () => {},\r\n        },\r\n      ],\r\n    });\r\n  };\r\n\r\n  const handleSessionChange = (session: Session) => {\r\n    const groups = mapper.mapSessionToQuestionGroups(session);\r\n    const responses = mapper.flattenQuestionGroups(groups);\r\n    const index = session.lastQuestionIndex;\r\n    let changedResponse: QuestionResponse | null = null;\r\n    if (index !== null)\r\n      changedResponse = index < responses.length ? responses[index] : null;\r\n\r\n    setResponseState([groups, { ...changedResponse } as QuestionResponse]);\r\n  };\r\n\r\n  const subscribeToSession = (session: Session) => {\r\n    if (!session?.id) return;\r\n    firebase?.subscribeToSession(session.id, handleSessionChange);\r\n    setSessionState(new SessionState(undefined, session));\r\n  };\r\n\r\n  const hash = getHash(responseState[0]);\r\n  const thankYou = useRef<HTMLDivElement>(null);\r\n  const hashExp = new RegExp('^A*$');\r\n  const isEmpty = !hashExp || hashExp.test(hash);\r\n  const isComplete = mapper\r\n    .flattenQuestionGroups(responseState[0])\r\n    .every((q) => q.confidence !== undefined);\r\n  const url = getHashUrl(hash);\r\n  const tweetUrl =\r\n    'https://twitter.com/intent/tweet?text=' +\r\n    encodeURI(\r\n      'I completed the Street Epistemology questionnaire. Have a look at my results: &url=' +\r\n        url\r\n    );\r\n\r\n  const handleSessionStarted = (sessionId: string) => {\r\n    debugger;\r\n    firebase?.createSession(sessionId, responseState);\r\n    setSessionState(new SessionState(sessionId, undefined));\r\n  };\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <Menu\r\n        useEmoji={useEmoji}\r\n        selectedSymbol={tickSymbol}\r\n        inSession={isSpectator}\r\n        showChanges={showChanges}\r\n        onUseEmojiToggled={setUseEmoji}\r\n        onShowChangesToggled={setShowChanges}\r\n        onSymbolSelected={setTickSymbol}\r\n        onSessionSelected={subscribeToSession}\r\n        onSessionStarted={handleSessionStarted}\r\n      />\r\n\r\n      <div className=\"container fluid\">\r\n        <div>\r\n          <Header />\r\n          {!isEmpty ? (\r\n            <ShareInfo\r\n              hash={hash}\r\n              showReset={!isSpectator}\r\n              onCopy={handleCopy}\r\n              onReset={handleReset}\r\n              tweetUrl={tweetUrl}\r\n            />\r\n          ) : null}\r\n          <SessionStatus\r\n            sessionState={sessionState}\r\n            onDisconnect={unsubscribeFromSession}\r\n          />\r\n        </div>\r\n        <Questionnaire\r\n          questionGroups={responseState[0]}\r\n          lastResponse={responseState[1]}\r\n          tickSymbol={tickSymbol}\r\n          useEmoji={useEmoji}\r\n          showChanges={showChanges}\r\n          handleSelection={handleResponse}\r\n        />\r\n        {isComplete ? (\r\n          <div ref={thankYou} className=\"jumbotron\">\r\n            <h2 className=\"display-4 difference  text-center text-uppercase\">\r\n              Thanks for completing the questionnaire!\r\n            </h2>\r\n          </div>\r\n        ) : null}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport logo from '../images/se-logo-color.png';\r\nimport { Link } from 'react-router-dom';\r\n\r\nexport const AboutPage = () => {\r\n  return (\r\n    <div className=\"container fluid\">\r\n      <div className=\"jumbotron\">\r\n        <div className=\"container\">\r\n          <div className=\"col-md-auto text-center\">\r\n            <Link to=\"/\">\r\n              <img\r\n                src={logo}\r\n                className=\"logo m-4 col-sm\"\r\n                alt=\"logo\"\r\n              />\r\n            </Link>\r\n          </div>\r\n          <div className=\"col align-middle text-center\">\r\n            <h1 className=\"display-4 difference\">\r\n              Street Epistemology Questionnaire\r\n            </h1>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div className=\"container\">\r\n        <h2>Discover More</h2>\r\n        <hr />\r\n        Street Epistemology is a conversational tool that helps people reflect\r\n        on the quality of their reasons and the reliability of their methods\r\n        used to arrive at their deeply-held beliefs. It aims to break down\r\n        barriers that people encounter when talking about their cherished\r\n        beliefs. Find out more at the official{' '}\r\n        <a href=\"https://streetepistemology.com/\">\r\n          Street Epistemology Webiste\r\n        </a>\r\n        !\r\n        <br />\r\n        <br />\r\n        <br />\r\n        <h2>FAQ</h2>\r\n        <hr />\r\n        <h3>What is this?</h3>\r\n        <p>\r\n          This questionnaire represents some of the topics that are typically\r\n          discussed in a conversation about epistemology, or how we know what we\r\n          know. It allows you to gain a deeper insight into the processes and\r\n          influences that form your beliefs.\r\n        </p>\r\n        <hr />\r\n        <h3>What is the point?</h3>\r\n        <p>\r\n          Our beliefs determine how we see and interact with the world. Someone\r\n          who believes that people are all generally good at heart sees the\r\n          world in a completely different light than someone who believes\r\n          everyone around them is secrectly KGB spies out to get them!\r\n          <br />\r\n          <br />\r\n          We frequently think about our beliefs, but rarely take the time to\r\n          think about how we arrive at those beliefs. That's like a math teacher\r\n          checking the answer but not all the steps in between! Even if the\r\n          answer is correct, there might be a flaw in the math that will cause\r\n          problems in the future.\r\n          <br />\r\n          <br />\r\n          This is like math, only less boring. The simple act of considering\r\n          these questions can help you think about how you come to your beliefs\r\n          and identify blindspots or places that you think you can do better at.\r\n          See them as your personal window into the beautiful, messy machine\r\n          that is your mind!\r\n        </p>\r\n        <hr />\r\n        <h3>What if I give the wrong answers?</h3>\r\n        <p>\r\n          There are no wrong answers! Yes, really.\r\n          <br />\r\n          <br />\r\n          They way you approach forming your beliefs is deeply personal and\r\n          unique, and influenced by your goals and values. Philosophers have\r\n          been slugging it out about the RIGHT way to do it for years, but they\r\n          still haven't found the silver bullet and they likely never will.\r\n          <br />\r\n          <br />\r\n          That doesn't mean thinking about your epistemology is pointless.\r\n          Beliefs can be like lazy, unwanted house guests. Unless you give them\r\n          a good kick, they'll just hang around indefinitely. Considering these\r\n          questions can help you figure out if there are doors you left open\r\n          letting those unwanted guests.\r\n        </p>\r\n        <hr />\r\n        <h3>Is this data collected?</h3>\r\n        <p>\r\n          No! The information you enter here is not collected in any way. When\r\n          you create a session, the data is temporarily saved to allow other\r\n          users to access your session, but that data is immediately deleted\r\n          when you session ends or within 24 hours of your session starting. The\r\n          only thing linking the session back to you is the name you give it. So\r\n          be creative and use a name that no one can tie back to you.\r\n        </p>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AboutPage;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport 'react-confirm-alert/src/react-confirm-alert.css';\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\nimport 'reactjs-popup/dist/index.css';\r\nimport './App.css';\r\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\r\nimport 'bootstrap';\r\nimport 'bootstrap/dist/js/bootstrap.js';\r\nimport Firebase, { FirebaseContext } from './firebase';\r\nimport AboutPage from './components/AboutPage';\r\n\r\nReactDOM.render(\r\n  <FirebaseContext.Provider value={new Firebase()}>\r\n    <React.StrictMode>\r\n      <Router>\r\n        <Switch>\r\n        <Route path=\"/about\">\r\n          <AboutPage />\r\n        </Route>\r\n          <Route path=\"/:id\">\r\n            <App />\r\n          </Route>\r\n          <Route path=\"/\">\r\n            <App />\r\n          </Route>\r\n        </Switch>\r\n      </Router>\r\n    </React.StrictMode>\r\n  </FirebaseContext.Provider>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}